# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- develop

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: Gradle@2
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'bootJar'
  - script: |
      jar i ./kotlin-rest-example.jar
      jar xvf ./kotlin-rest-example.jar
      rm ./kotlin-rest-example.jar
      jar cvfm0 kotlin-rest-example.jar ./META-INF/MANIFEST.MF
      jar tvf kotlin-rest-example.jar
    displayName: Prepare Gradle Spring Boot Jar for MS Maven Deploy
    name: gradle_Spring_Boot_Transform_To_Maven_Jar
    workingDirectory: '$(Build.SourcesDirectory)/build/libs'
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Visual Studio Enterprise Subscription (fc099a2b-6d5f-40bb-a8da-c87f37d942f9)'
      appType: 'webAppLinux'
      WebAppName: 'kotlin-rest-example'
      packageForLinux: '$(Build.SourcesDirectory)/build/libs/*.jar'
      RuntimeStack: 'JAVA|8-jre8'
#  - task: AzureWebApp@1
#    inputs:
#      azureSubscription: 'Visual Studio Enterprise Subscription (fc099a2b-6d5f-40bb-a8da-c87f37d942f9)'
#      appType: 'webAppLinux'
#      appName: 'kotlin-rest-example'
#      package: '$(Build.SourcesDirectory)/build/libs/*.jar'
#      runtimeStack: 'JAVA|8-jre8'
#  - task: PublishPipelineArtifact@1
#    inputs:
#      targetPath: '$(Build.SourcesDirectory)/build/libs/*.jar'
#      artifactName: 'kotlin-rest-api'
